In order to use wJs you need to have some base element to transfert data from
PHP to Javascript. Due to the lot of different projects and the amout of
changes, this install file may not be up to date. If you have some questions,
please contact me on my we page.



INSTALL WJS
-----------
Download and unpack wJs, place it into your library folder.


CONFIGURE JAVASCRIPT
--------------------
Make a html script link to the jQuery library  

   <script type="text/javascript"
src="http://code.jquery.com/jquery-1.10.2.min.js"></script>


	
CONFIGURE PHP
-------------
Require PHP wjs internal classes.

   require_once "library/wjs/wjs.inc";

	 
Create a new wJs global instance (default loaders are automatically registered).

   $w = new wjs();

    
Configure response file path from client side (see section below). 

   $w->js_setting('path_response', 'response.php');

	
Print wJs header in the head of your page, before the head end tag. This will
load required wJs core files.

   print $w->js_header();

	
Print wJs footer at the bottom of your page before the body end tag. This will
print startup package for wJs containing default loaders and preloaded page
contents. 

   print $w->js_footer();




CONFIGURE PHP RESPONSE FILE
---------------------------
In order to work correctly you need to specify a PHP response file who handle
request from wJs. Let's call it "response.php", and place it at our site's root,
then call wJs again.
<code>// Load wjs.
require_once "library/wjs/wjs.inc";
$w = new wjs('library/wjs', TRUE);</code>

Now we need to register our available scripts, use TRUE as last argument to
append it to output package (see next step). This let you de filter if you want
to load all available scripts or not. 

   // Register your scripts.  
   $w->collection_item_register('javascript', 'my_script',
'library/scripts/my_script.js');

  
We need to know which script is requested by client. This example do not include
security management to filter variables. WJs use two queries variables t =
script_type, s=script_name.  

   // Using this simple script is not secure.    
   // You may filter data to ensure that values   
   // are safe, according your own security policy.   
   $script_type = (isset($_GET['t'])) ? $_GET['t'] : FALSE;    
   $script_name = (isset($_GET['s'])) ? $_GET['s'] : FALSE;
   

With theses variables, we ask wJs to add script to response.

   // Append requested scripts.   
   $w->output_append($script_type, $script_name);

	
Finally, we print result.

   // Render.   
   print $w->js_package();



CHECK RESULT
------------
wJs is now configured and ready to work. In order to test result, we create an
alert into our 'library/scripts/my_script.js' file, and a button in our page
containing a request to wJs.  

   w.load('javascript','my_script');
  
    
This is the whole button code.  


   <input type="button" onclick="w.load('javascript','my_script');" value="Click
me"/>
